"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunk"] = globalThis["webpackChunk"] || []).push([["src_cart_cartStore_ts"],{

/***/ "./src/cart/cartStore.ts":
/*!*******************************!*\
  !*** ./src/cart/cartStore.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmailAddressConflictError: () => (/* binding */ EmailAddressConflictError),\n/* harmony export */   useCartStore: () => (/* binding */ useCartStore)\n/* harmony export */ });\n/* harmony import */ var pinia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pinia */ \"../node_modules/pinia/dist/pinia.mjs\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"../node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../graphql/shopClient */ \"./src/graphql/shopClient.ts\");\n/* harmony import */ var _lib_useLazyAsyncState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/useLazyAsyncState */ \"./src/lib/useLazyAsyncState.ts\");\n/* harmony import */ var _lib_pick__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/pick */ \"./src/lib/pick.ts\");\n\n\n\n\n\n// Declare a custom javascript error type EmailAddressConflictError\nclass EmailAddressConflictError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'EmailAddressConflictError';\n    // This line maintains proper stack trace for where our error was thrown (only available on V8)\n    Error.captureStackTrace?.(this, EmailAddressConflictError);\n  }\n}\nfunction useCurrentOrderDetailed() {\n  const vars = (0,_lib_useLazyAsyncState__WEBPACK_IMPORTED_MODULE_2__.useLazyAsyncState)(async () => {\n    const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.activeOrderFull();\n    return result.activeOrder;\n  }, null, {\n    resetOnExecute: false\n  }, 'currentOrderDetailed');\n  return {\n    currentOrderDetailed: vars.state,\n    currentOrderDetailedLoading: vars.isLoading,\n    updateCurrentOrderDetailed: vars.execute\n  };\n}\nfunction useCurrentOrderSummary() {\n  const vars = (0,_lib_useLazyAsyncState__WEBPACK_IMPORTED_MODULE_2__.useLazyAsyncState)(async () => {\n    const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.activeOrder();\n    return result.activeOrder;\n  }, null, {\n    resetOnExecute: false\n  }, 'currentOrderSummary');\n  return {\n    currentOrderSummary: vars.state,\n    currentOrderSummaryLoading: vars.isLoading,\n    updateCurrentOrderSummary: vars.execute\n  };\n}\nfunction useAvailableCountries() {\n  const {\n    execute: updateAvailableCountries,\n    state: availableCountries,\n    isLoading: availableCountriesLoading\n  } = (0,_lib_useLazyAsyncState__WEBPACK_IMPORTED_MODULE_2__.useLazyAsyncState)(async () => {\n    console.warn(\"Loading available countries\");\n    const resp = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.availableCountries();\n    return resp.availableCountries;\n  }, [], {\n    resetOnExecute: false\n  }, 'availableCountries');\n  return {\n    updateAvailableCountries,\n    availableCountries,\n    availableCountriesLoading\n  };\n}\nfunction useAllShippingRates() {\n  const result = (0,_lib_useLazyAsyncState__WEBPACK_IMPORTED_MODULE_2__.useLazyAsyncState)(async () => {\n    const [shipstationRates, allMethods] = await Promise.all([_graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.orderShippingRates(), _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.eligibleShippingMethods()]);\n    // Combine them into something useful\n    const ssRates = shipstationRates.orderAllAvailableRates;\n    const methods = allMethods.eligibleShippingMethods;\n    const output = methods.flatMap(method => {\n      if (method.code === 'ship-station') {\n        // All shipstation rates use this method\n        return ssRates.flatMap(carrier => carrier.services.map(service => ({\n          name: service.serviceName,\n          methodId: method.id,\n          methodCode: method.code,\n          shipmentCost: service.shipmentCost,\n          otherCost: service.otherCost,\n          key: `${carrier.code}-${service.serviceCode}`,\n          carrierCode: carrier.code,\n          serviceCode: service.serviceCode\n        })));\n      } else {\n        return {\n          name: method.name,\n          methodId: method.id,\n          methodCode: method.code,\n          shipmentCost: method.price,\n          otherCost: method.priceWithTax - method.price,\n          // May not be what we want\n          key: method.id,\n          carrierCode: null,\n          serviceCode: null\n        };\n      }\n    });\n    // Sort by price, low to high\n    output.sort((a, b) => a.shipmentCost + a.otherCost - (b.shipmentCost + b.otherCost));\n    return output;\n  }, null, {\n    resetOnExecute: false\n  }, 'allShippingRates');\n  return {\n    allShippingRates: result.state,\n    allShippingRatesLoading: result.isLoading,\n    updateAllShippingRates: result.execute,\n    allShippingRatesLoaded: result.isReady\n  };\n}\nconst useCartStore = (0,pinia__WEBPACK_IMPORTED_MODULE_3__.defineStore)('cart', () => {\n  const cartVisible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);\n  const isLoading = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);\n  const orderData = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)({});\n  const placedOrderCode = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);\n  const authorizeNetData = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)({});\n  const paymentMethodCode = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(null);\n  // Loaded on demand, get the available countries\n  const lazyLoaded = {\n    ...useAvailableCountries(),\n    ...useCurrentOrderDetailed(),\n    ...useCurrentOrderSummary(),\n    ...useAllShippingRates()\n  };\n  function refreshShippingRates() {\n    if (lazyLoaded.allShippingRatesLoaded || lazyLoaded.allShippingRatesLoading) {\n      // This way if they haven't been loaded it won't refresh them, but it will if they have\n      lazyLoaded.updateAllShippingRates();\n    }\n  }\n  (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(lazyLoaded.currentOrderDetailed, newVal => {\n    // Any time this updates it's \"the definitive source\" for our active order\n    if (newVal) {\n      orderData.value = structuredClone(newVal);\n    }\n  });\n  (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(lazyLoaded.currentOrderSummary, newVal => {\n    // Any time this updates use it to update any missing fields in our active order\n    if (newVal) {\n      orderData.value = {\n        ...orderData.value,\n        ...structuredClone(newVal)\n      };\n    }\n  });\n  const hasItemDiscount = item => !!item.discounts?.some(d => d.amount);\n  const adjustedItemPrice = item => {\n    // discount is (presumably) always negative\n    const discount = item.discounts?.reduce((acc, cur) => acc + cur.amount, 0) || 0;\n    return item.unitPrice + discount / item.quantity;\n  };\n  const adjustedLinePrice = line => {\n    const discount = line.discounts?.reduce((acc, cur) => acc + cur.amount, 0) || 0;\n    return line.linePrice + discount;\n  };\n  function formatPrice(price) {\n    const adjPrice = price / 100;\n    if (isNaN(adjPrice)) return 0 .toFixed(2);else return (price / 100).toFixed(2);\n  }\n  const activeOrder = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return orderData.value;\n  });\n  const shippingCost = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return formatPrice(orderData.value.shipping);\n  });\n  const orderTotal = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    const totalCost = orderData.value.lines?.reduce((acc, cur) => acc + cur.quantity * cur.unitPrice, 0) || 0;\n    return formatPrice(totalCost);\n  });\n  const taxTotal = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    const orderTaxes = orderData.value.taxSummary?.reduce((acc, cur) => acc + cur.taxTotal, 0) || 0;\n    return formatPrice(orderTaxes);\n  });\n  const customerEmail = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return orderData.value.customer?.emailAddress;\n  });\n  const subtotal = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return formatPrice(orderData.value.subTotal);\n  });\n  const total = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return formatPrice(orderData.value.totalWithTax);\n  });\n  const discount = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    const totalDiscount = orderData.value.discounts?.reduce((acc, cur) => acc + cur.amount, 0) || 0;\n    return `${formatPrice(totalDiscount)}`.replace(/^-?/, '$&\\$');\n  });\n  const couponCodes = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return orderData.value.couponCodes || [];\n  });\n  const customFields = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return orderData.value.customFields;\n  });\n  const items = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return orderData.value.lines || [];\n  });\n  const itemCount = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return items.value.reduce((acc, cur) => acc + cur.quantity, 0);\n  });\n  const finalOrderCode = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    if (!placedOrderCode.value) {\n      const storedCode = window.localStorage.getItem('placedOrderCode');\n      if (storedCode) {\n        placedOrderCode.value = storedCode;\n      }\n    }\n    return placedOrderCode.value;\n  });\n  const curShippingMethod = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    const curMethod = orderData.value.shippingLines?.[0]?.shippingMethod;\n    if (curMethod?.code === 'ship-station') {\n      // Special handling\n      return {\n        methodId: curMethod.id,\n        methodCode: 'ship-station',\n        carrierCode: orderData.value.customFields?.carrierCode,\n        serviceCode: orderData.value.customFields?.serviceCode\n      };\n    } else if (curMethod) {\n      return {\n        methodId: curMethod.id\n      };\n    } else {\n      return null;\n    }\n  });\n  const shippingTotal = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    if (!orderData.value.shippingLines?.length) return null;\n    const total = orderData.value.shippingLines?.reduce((acc, cur) => acc + cur.priceWithTax, 0) || 0;\n    return total;\n  });\n  const authorizeNetSecureData = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return authorizeNetData.value;\n  });\n  const selectedPaymentMethodCode = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    return paymentMethodCode.value;\n  });\n  function updateOrder(updates) {\n    console.log(\"Updating order\", updates);\n    for (const [key, value] of Object.entries(updates)) {\n      orderData.value[key] = structuredClone(value);\n    }\n    refreshShippingRates(); // Update rates in case free shipping was added / removed\n  }\n  function updatePaymentData(updates, methodCode) {\n    authorizeNetData.value = {\n      ...authorizeNetData.value,\n      ...updates\n    };\n    paymentMethodCode.value = methodCode;\n  }\n  async function ensureOrderExists() {\n    if (!orderData.value) {\n      await refresh();\n    }\n    if (!orderData.value) {\n      throw new Error(\"Could not add to order, order not loading\");\n    }\n  }\n  async function refresh(full = false) {\n    try {\n      isLoading.value++;\n      if (full) {\n        await lazyLoaded.updateCurrentOrderDetailed();\n      } else {\n        await lazyLoaded.updateCurrentOrderSummary();\n      }\n    } catch (err) {\n      console.error(\"Could not refresh shopping cart! \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function removeFromCart(variantId) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.removeOrderLine({\n        orderLineId: variantId\n      });\n      const info = result.removeOrderLine;\n      if (!info.__typename) {\n        throw new Error(\"Could not remove item from order, unknown error\" + JSON.stringify(result));\n      } else if (info.__typename !== \"Order\") {\n        throw new Error(\"Could not remove item from order: \" + JSON.stringify(info));\n      } else {\n        updateOrder(info);\n      }\n    } catch (err) {\n      console.error(\"Could not remove item from order: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  function processOrderChange(variantId, result) {\n    const info = 'addItemToOrder' in result ? result.addItemToOrder : result.adjustOrderLine;\n    if (!info.__typename) {\n      throw new Error(\"Could not add item to order, unknown error\" + JSON.stringify(result));\n    }\n    switch (info.__typename) {\n      case 'InsufficientStockError':\n        // insufficientAvail.value[variantId] = info.quantityAvailable;\n        updateOrder(info.order);\n        break;\n      case 'Order':\n        updateOrder(info);\n        break;\n      case 'NegativeQuantityError':\n      case 'OrderLimitError':\n      case 'OrderModificationError':\n        throw new Error(\"Could not add item to order: \" + info.message);\n    }\n  }\n  async function addToCart(variantId, quantity) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.addItemToOrder({\n        productVariantId: variantId,\n        quantity\n      });\n      processOrderChange(variantId, result);\n      return orderData.value;\n    } catch (err) {\n      console.error(\"Could not add item to order: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function updateItemQuantities(quantities) {\n    try {\n      isLoading.value++;\n      // Doing all of this asynchronously would be slightly better, but it's not worth the complexity\n      // and potential for out-of-order results to mess with things\n      for (const {\n        id,\n        quantity\n      } of quantities) {\n        if (quantity === 0) {\n          await removeFromCart(id); // This automatically updates things, no need to do anything special\n        } else {\n          const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.adjustOrderLine({\n            orderLineId: id,\n            quantity\n          });\n          processOrderChange(id, result);\n        }\n      }\n    } catch (err) {\n      console.error(\"Could not update item quantities: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function setShippingAddress(address) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      if (address.customFields?.firstName && address.customFields?.lastName) {\n        address.fullName = `${address.customFields.firstName} ${address.customFields.lastName}`;\n      }\n      const input = address;\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.setOrderShippingAddress({\n        input\n      });\n      const info = result.setOrderShippingAddress;\n      if (!info.__typename) {\n        throw new Error(\"Could not set shipping address, unknown error\" + JSON.stringify(result));\n      } else if (info.__typename !== \"Order\") {\n        throw new Error(\"Could not set shipping address: \" + JSON.stringify(info));\n      } else {\n        updateOrder(info);\n      }\n    } catch (err) {\n      console.error(\"Could not set shipping address: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function setBillingAddress(address) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      if (address.customFields?.firstName && address.customFields?.lastName) {\n        address.fullName = `${address.customFields.firstName} ${address.customFields.lastName}`;\n      }\n      address.customFields = {\n        ...address.customFields,\n        email: orderData.value.customer?.emailAddress\n      };\n      const input = address;\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.setOrderBillingAddress({\n        input\n      });\n      const info = result.setOrderBillingAddress;\n      if (!info.__typename) {\n        throw new Error(\"Could not set billing address, unknown error\" + JSON.stringify(result));\n      } else if (info.__typename !== \"Order\") {\n        throw new Error(\"Could not set billing address: \" + JSON.stringify(info));\n      } else {\n        updateOrder(info);\n      }\n    } catch (err) {\n      console.error(\"Could not set billing address: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function applyCouponCode(code) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.ApplyCouponCode({\n        code\n      });\n      const info = result.applyCouponCode;\n      if (!info.__typename || info.__typename !== \"Order\") {\n        console.error(\"Could not apply coupon code, error\", JSON.stringify(result));\n        const errorResult = result.applyCouponCode;\n        return {\n          success: false,\n          message: errorResult.message\n        };\n      } else {\n        updateOrder(info);\n        return {\n          success: true,\n          message: \"Coupon code applied\"\n        };\n      }\n    } catch (err) {\n      console.error(\"Could not apply coupon code: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function removeCouponCode(code) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.RemoveCouponCode({\n        code\n      });\n      const info = result.removeCouponCode;\n      if (!info?.__typename || info.__typename !== \"Order\") {\n        throw new Error(\"Could not remove coupon code\");\n      } else {\n        updateOrder(info);\n      }\n    } catch (err) {\n      console.error(\"Could not remove coupon code: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function setOrderCustomFields(customFields) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.SetOrderCustomField({\n        input: customFields\n      });\n      const info = result.setOrderCustomFields;\n      if (!info?.__typename || info.__typename !== \"Order\") {\n        throw new Error(\"Could not set custom fields: \" + info.message);\n      } else {\n        updateOrder(info);\n      }\n    } catch (err) {\n      console.error(\"Could not set custom fields: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function transitionOrderToState(state) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.TransitionOrderToState({\n        state\n      });\n      const info = result.transitionOrderToState;\n      if (!info?.__typename || info.__typename !== \"Order\") {\n        if (info?.toState === info?.toState) {\n          // If the state is already the desired state, then we don't need to do anything\n          return;\n        }\n        throw new Error(\"Could not transition order to state \" + info?.message);\n      } else {\n        updateOrder(info);\n      }\n    } catch (err) {\n      console.error(\"Could not transition order to state: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function setOrderShippingMethod(method) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      if (method.methodCode === 'ship-station') {\n        await setOrderCustomFields({\n          customFields: {\n            carrierCode: method.carrierCode,\n            serviceCode: method.serviceCode,\n            serviceName: method.name\n          }\n        });\n      }\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.setOrderShippingMethod({\n        shippingMethodId: method.methodId\n      });\n      const info = result.setOrderShippingMethod;\n      if (!info?.__typename || info.__typename !== \"Order\") {\n        throw new Error(\"Could not set shipping method: \" + info.message);\n      } else {\n        updateOrder(info);\n      }\n    } catch (err) {\n      console.error(\"Could not set shipping method: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function addPaymentToOrder(method, metadata) {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.addPaymentToOrder({\n        input: {\n          method,\n          metadata\n        }\n      });\n      const info = result.addPaymentToOrder;\n      if (!info?.__typename || info.__typename !== \"Order\") {\n        throw new Error(\"Could not add payment to order: \" + info.message);\n      } else {\n        placedOrderCode.value = info.code;\n        window.localStorage.setItem('placedOrderCode', info.code);\n        orderData.value = {};\n      }\n    } catch (err) {\n      console.error(\"Could not add payment to order: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function setTaxCloudAuthorization() {\n    try {\n      isLoading.value++;\n      await ensureOrderExists();\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.SetTaxCloudAuthorization();\n      const info = result.setTaxCloudAuthorization;\n      updateOrder(info);\n    } catch (err) {\n      console.error(\"Could not set tax cloud authorization: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function createGuestOrderCustomer(orderCode) {\n    try {\n      isLoading.value++;\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.createGuestOrderCustomerUser({\n        orderCode\n      });\n      const info = result.createGuestOrderCustomerUser;\n      if (info?.__typename !== 'Customer') {\n        throw new Error(\"Could not create guest order customer. Please try manual signup\");\n      }\n      return info;\n    } catch (err) {\n      console.error(\"Could not create guest order customer: \", err);\n      throw err;\n    } finally {\n      isLoading.value--;\n    }\n  }\n  async function setGuestAccount(params) {\n    try {\n      const result = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.setCustomerForOrder({\n        input: {\n          firstName: params.firstname,\n          lastName: params.lastname,\n          emailAddress: params.email,\n          phoneNumber: params.phoneNumber,\n          ...(params.callsign && {\n            customFields: {\n              callsign: params.callsign\n            }\n          })\n        }\n      });\n      const info = result.setCustomerForOrder;\n      if (info.__typename === 'Order') {\n        updateOrder((0,_lib_pick__WEBPACK_IMPORTED_MODULE_4__.pick)(info, ['customer', 'subTotal', 'state']));\n      } else if (info.__typename === 'EmailAddressConflictError') {\n        throw new EmailAddressConflictError(\"There is already an account for this email address, please log in to continue\");\n      } else if (info.errorCode) {\n        throw new Error(`${info.__typename || info.errorCode}: ${info.message}`);\n      } else {\n        throw new Error(\"Unknown error setting guest account: \" + JSON.stringify(info));\n      }\n    } catch (err) {\n      console.error(\"Error setting guest account:\", err);\n      throw err;\n    }\n  }\n  refresh();\n  const formattedShippingAddress = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    if (orderData.value.shippingAddress) {\n      const addr = orderData.value.shippingAddress;\n      const parts = [addr.streetLine1, addr.streetLine2, `, ${addr.city} ${addr.province} ${addr.postalCode}, `, addr.countryCode];\n      return parts.filter(x => x).join(' ');\n    } else {\n      return '';\n    }\n  });\n  const formattedBillingAddress = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {\n    if (orderData.value.billingAddress) {\n      const addr = orderData.value.billingAddress;\n      const parts = [addr.streetLine1, addr.streetLine2, `, ${addr.city} ${addr.province} ${addr.postalCode}, `, addr.countryCode];\n      return parts.filter(x => x).join(' ');\n    } else {\n      return '';\n    }\n  });\n  function getShippingRates() {\n    const result = (0,_lib_useLazyAsyncState__WEBPACK_IMPORTED_MODULE_2__.useLazyAsyncState)(async () => {\n      const rates = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.orderShippingRates();\n      return rates.orderAllAvailableRates;\n    }, null, {\n      resetOnExecute: true\n    }, 'shippingRates');\n    return {\n      shippingRates: result.state,\n      shippingRatesLoading: result.isLoading,\n      updateShippingRates: result.execute,\n      shippingRatesLoaded: result.isReady\n    };\n  }\n  async function getEligibleShippingMethods() {\n    const rates = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.eligibleShippingMethods();\n    return rates.eligibleShippingMethods;\n  }\n  async function getEligiblePaymentMethods() {\n    const rates = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.eligiblePaymentMethods();\n    return rates.eligiblePaymentMethods;\n  }\n  async function getAuthorizeNetKeys() {\n    const keys = await _graphql_shopClient__WEBPACK_IMPORTED_MODULE_1__.shopSdk.authorizeNetKeys();\n    return keys.authorizeNetKeys;\n  }\n  return {\n    showCart() {\n      cartVisible.value = true;\n    },\n    hideCart() {\n      cartVisible.value = false;\n    },\n    toggleCart() {\n      cartVisible.value = !cartVisible.value;\n    },\n    cartVisible,\n    isLoading,\n    formatPrice,\n    hasItemDiscount,\n    adjustedItemPrice,\n    adjustedLinePrice,\n    customerEmail,\n    activeOrder,\n    total,\n    subtotal,\n    items,\n    itemCount,\n    discount,\n    couponCodes,\n    orderTotal,\n    taxTotal,\n    shippingCost,\n    customFields,\n    curShippingMethod,\n    shippingTotal,\n    finalOrderCode,\n    formattedShippingAddress,\n    formattedBillingAddress,\n    refresh,\n    addToCart,\n    removeFromCart,\n    updateItemQuantities,\n    setShippingAddress,\n    setBillingAddress,\n    setGuestAccount,\n    getShippingRates,\n    applyCouponCode,\n    removeCouponCode,\n    setOrderCustomFields,\n    getEligibleShippingMethods,\n    getEligiblePaymentMethods,\n    getAuthorizeNetKeys,\n    setOrderShippingMethod,\n    transitionOrderToState,\n    addPaymentToOrder,\n    updatePaymentData,\n    authorizeNetSecureData,\n    selectedPaymentMethodCode,\n    setTaxCloudAuthorization,\n    createGuestOrderCustomer,\n    // Lazy-loaded fields:\n    ...lazyLoaded\n  };\n});\n\n//# sourceURL=webpack:///./src/cart/cartStore.ts?");

/***/ }),

/***/ "./src/lib/pick.ts":
/*!*************************!*\
  !*** ./src/lib/pick.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pick: () => (/* binding */ pick)\n/* harmony export */ });\nfunction pick(objIn, ...args) {\n  const fields = Array.isArray(args[0]) ? args[0] : args;\n  return Object.fromEntries(fields.map(f => [f, objIn[f]]));\n}\n\n//# sourceURL=webpack:///./src/lib/pick.ts?");

/***/ })

}]);